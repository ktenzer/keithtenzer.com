I"5<<h2><img class="alignnone  wp-image-11169" src="/assets/2017/08/kvm-tucha.png" alt="KVM-tucha" width="220" height="151" /><img class="alignnone  wp-image-5506" src="/assets/2017/08/plus_sign.gif" alt="plus_sign" width="155" height="155" /><img class="alignnone  wp-image-11178" src="/assets/2017/08/window4ntserver.png" alt="Window4NTserver" width="233" height="152" /></h2>
<h2>Overview</h2>
<p><span style="font-weight:400;">This article was written by myself and fellow colleague Götz Rieger. Often one of the most challenging problems we are facing today is both absorbing and leading change. Software defined-everything has taken over and is leveling the playing field, de-marginalizing staunch competitive advantages and nothing is safe anymore. Develop great applications and thrive or become irrelevant is the mantra facing many organizations. In such environments it is important to innovate constantly, delivering new capabilities at an ever increasing speed. In order to do so, new practices (DevOps), values (Agile) and of course technology (Containers) are being implemented. </span></p>
<p><span style="font-weight:400;">Today it seems almost everyone is focused on "the new" software-defined whatever, when in reality change happens at different levels and different speeds. Gartner tried to summarize this with "mode 1 vs mode 2" but that trivializes things too far. It comes down to application lifecycles which dictates dependency on change.  What if certain software doesn't need to change? What if it has a purpose and is already doing it's job function? What if the software cannot be ported to a new operating platform? What do you do then? The answer surprisingly, is maybe nothing? Maybe we let those applications live well beyond their intended support lifecycles. Consider the old programs in the Matrix, some found a way to survive and were not killed. These were also some of the most important, powerful programs. </span></p>
<p><span style="font-weight:400;">Virtualization has enabled us to let x86 platforms essentially run forever or at least well beyond their support lifecycles (hardware and software). If we consider outdated Cobol applications on UNIX or Windows platforms like NT, XP and 2003; they haven't been supported for years. Applications running on these platforms might are not able to migrate for whatever reason, else they would have already done so. If we think about it, this is in fact a very valid use case for virtualization. There are of course other considerations that are important, like isolation (since these applications are not receiving patches) but assuming that is handled, why not? If it ain't broken and doesn't need to change, why fix it? </span></p>
<p><span style="font-weight:400;">In this article we will look at how to run Windows NT Server (an operating system that hasn't been supported since 2004) on KVM and Red Hat Virtualization powered by KVM. </span></p>
<p><!--more--></p>
<h2>Prerequisites</h2>
<p style="display:inline !important;">We found two options to work well, a VMware VM with NT already installed and patched or install NT into a qemu/KVM VM. In order to continue you will need the following:</p>
<ul>
<li><a href="https://keithtenzer.com/2017/05/02/rhev-4-1-lab-installation-and-configuration-guide/">Red Hat Virtualization (RHV) environment</a> (Here we used RHV 4.1)</li>
<li>KVM</li>
<li>Windows NT installation medium (ISO) or a VMware virtual disk with pre-installed NT</li>
</ul>
<p>WARNING: Just to be clear Windows NT is <span style="text-decoration:underline;"><strong>not</strong></span> a supported guest OS for Red Hat Virtualization (RHV). That should be obvious since it isn't supported by Microsoft either.</p>
<h2>Option 1: Installing Windows NT ISO</h2>
<p><span style="font-weight:400;">On RHV we didn’t get the Windows NT 4.0 installer from the original boot CD to run without Blue Screening on us, so we had to take a detour. Windows NT 4.0 installs on qemu/KVM using virt-manager (RHEL 7.3 in this case). After installation, NT can be patched up to SP6 (which runs fine on RHV) and then the VM can be migrated to RHV. Remember in those days you couldn’t easily build a slip-stream CD with the updates integrated anyway.</span></p>
<p><span style="font-weight:400;">In order to install Windows NT you will need the original installation CD as  ISO image, Service Pack 6 and the Realtek RTL8139 network driver for NT. Of course it goes without saying, you should use a purchased copy of Windows NT. </span></p>
<p><strong>Convert Windows NT SP 6 to ISO</strong></p>
<pre># mkisofs -o iso winntsp6.iso</pre>
<p><strong>Convert Realtek Driver to ISO</strong></p>
<pre># mkisofs -o iso rtl8139.iso</pre>
<p><strong>Create Windows NT Virtual Machine in KVM</strong></p>
<p>Provide the Windows NT Server ISO and configure the Virtual Machine using virt-manager.</p>
<p><strong>Set CPU Model to Pentium</strong></p>
<p><span style="font-weight:400;">Windows NT (without SP6) can only boot on older CPU generations like Pentium.</span></p>
<p><img class="alignnone size-full wp-image-10776" src="/assets/2017/08/nt1.png" alt="nt1" width="425" height="410" /></p>
<p><strong>Set Virtual Disk to IDE</strong></p>
<p>Windows NT does not have a virtio driver so we need to use IDE interface.</p>
<p><img class="alignnone size-full wp-image-10778" src="/assets/2017/08/nt2.png" alt="nt2" width="503" height="318" /></p>
<p><strong>Set Network to RTL8139</strong></p>
<p>Windows NT has drivers for Realtek 8139.</p>
<p><img class="alignnone size-full wp-image-10779" src="/assets/2017/08/nt3.png" alt="nt3" width="642" height="133" /></p>
<p><strong>Configure Windows NT Server</strong></p>
<p><img class="alignnone size-full wp-image-10781" src="/assets/2017/08/nt4.png" alt="nt4" width="705" height="394" /></p>
<p><strong>Format Partition as NTFS </strong></p>
<p>Select defaults other than NTFS for the partition.</p>
<p><img class="alignnone size-full wp-image-10784" src="/assets/2017/08/nt5.png" alt="nt5" width="715" height="392" /></p>
<p><strong>Reboot</strong></p>
<p>Before rebooting change the boot order in virtual machine so that it boots from disk and not cdrom.</p>
<p><img class="alignnone size-full wp-image-10802" src="/assets/2017/08/nt6.png" alt="nt6" width="707" height="388" /></p>
<p><strong>Windows NT Setup</strong></p>
<p>Enter license and otherwise select defaults and server role (DC or standalone).</p>
<p><img class="alignnone size-full wp-image-10804" src="/assets/2017/08/nt7.png" alt="nt7" width="621" height="446" /></p>
<p><strong>Install Realtek 8139 Driver</strong></p>
<p>Mount the rtl8139.iso in the cdrom that was created above and install driver. Configure IP, Subnet, Gateway and DNS.</p>
<p><img class="alignnone size-full wp-image-10805" src="/assets/2017/08/nt8.png" alt="nt8" width="587" height="451" /></p>
<p><b>Login to Windows NT Server</b></p>
<p><img class="alignnone size-full wp-image-10808" src="/assets/2017/08/nt9.png" alt="nt9" width="807" height="637" /></p>
<p><strong>Install Windows NT Server SP 6</strong></p>
<p><span style="font-weight:400;">Using ISO created above, mount the Windows NT SP6 ISO and run the installer.</span></p>
<p><span style="font-weight:400;">Note: A lesson learned back in the day: If you install the network card driver (or anything else for that matter) after Service Pack installation, just re-install the SP afterwards. This takes care of the dreaded “a service couldn’t be started” error. </span></p>
<p><img class="alignnone size-full wp-image-10810" src="/assets/2017/08/nt10.png" alt="nt10" width="816" height="645" /></p>
<p><strong>Test Networking</strong></p>
<p>Ensure network stack is functional.</p>
<p><img class="alignnone size-full wp-image-10816" src="/assets/2017/08/nt111.png" alt="nt11" width="823" height="639" /></p>
<p><span style="font-weight:400;">Congratulations!!! You just installed plus booted, an Operating System that has been off support since 2004 (over 10 years) and would most definitely not run on any modern hardware that exists today.</span></p>
<h2>Option 2: Importing from VMware</h2>
<p><span style="font-weight:400;">Red Hat provides a tool called</span><a href="https://access.redhat.com/articles/1351473"> <span style="font-weight:400;">virt-v2v</span></a><span style="font-weight:400;"> for converting from VMware or other virtualization platforms to RHV and KVM. Unfortunately in this case, Windows NT is simply too old and virt-v2v cannot recognize the operating system. Thankfully however the qemu-img command can easily convert a vmdk to qcow2.</span></p>
<p><strong>Convert VMDK to QCOW2</strong></p>
<pre># qemu-img convert -f vmdk -O qcow2 winnt_server.vmdk winnt_server.qcow2</pre>
<p><span style="font-weight:400;">Once the image is converted you can import into KVM or RHV.</span></p>
<p><span style="font-weight:400;">Note: you need to remember to set CPU: Pentium, Virtual Disk Interface: IDE and NIC: RTL8139 after importing and before starting virtual machine.</span></p>
<h2>Importing Windows NT Server in RHV</h2>
<p>Now that we have a working Windows NT Server 4 SP6 qcow2 image it is time to import into Red Hat Virtualization (RHV). There are several options but we will explore two.</p>
<ul>
<li>Importing into RHV directly from KVM (Libvirt)</li>
<li>Importing using a script from <a href="http://rwmj.wordpress.com">Richard Jones</a> (Colleague in Virtualization Group @Red Hat)</li>
</ul>
<p><strong>Option 1: Import using KVM (Libvirt)</strong></p>
<p>RHV has a direct integration and can import virtual machines directly from many virtualization platforms like Libvirt, VMware, Amazon EC2, etc.</p>
<p><strong>Configure KVM (Libvirt) to allow external connections</strong></p>
<p class="screen"><strong>[On KVM Host]</strong></p>
<p><strong>Enable TCP connections to Libvirt Daemon</strong></p>
<pre class="screen">#vi /etc/libvirt/libvirtd.conf
listen_tls = 0
listen_tcp = 1
tcp_port = "16509"
auth_tcp = "none"</pre>
<pre class="screen">#vi /etc/sysconfig/libvirtd
LIBVIRTD_ARGS="--listen"</pre>
<p><strong>Open Libvirt Port on Firewall</strong></p>
<pre>firewall-cmd --permanent --add-port="16509/tcp"
firewall-cmd --reload</pre>
<p><strong>Import Virtual Machine </strong></p>
<p>In RHV management console under VM-&gt;Import select KVM as source. The URI should be "qemu+tcp://IP/system". Once setting username and password select load to display the virtual machines running on KVM host. Select the Window NT Server virtual machine.</p>
<p><img class="alignnone size-full wp-image-10786" src="/assets/2017/08/screenshot-from-2017-07-28-14-55-39.png" alt="Screenshot from 2017-07-28 14-55-39" width="984" height="808" /></p>
<p><strong>Choose Storage Domain</strong></p>
<p>Storage domains in RHV are similar to VMware datastores, this is where the virtual machines live. Here we will select a desired storage domain.</p>
<p><img class="alignnone size-full wp-image-10788" src="/assets/2017/08/screenshot-from-2017-07-28-14-56-10.png" alt="Screenshot from 2017-07-28 14-56-10" width="1234" height="380" /></p>
<p>Once the import process is started you will be notified and can follow the process via the event monitor in RHV.</p>
<p><b>Option 2: Import Using Script</b></p>
<p><span style="font-weight:400;">Richard Jones has created a very useful script that imports qcow2 images directly into RHV via the export domain (a special storage domain for importing templates). We really like this method for qcow2 because it doesn't try to convert the image like virt-v2v (which isn't needed) and you don’t need RHV to have direct access to another virtualization platform. The script and it's commits are stored</span><a href="http://git.annexia.org/?p=import-to-ovirt.git"> <span style="font-weight:400;">here</span></a><span style="font-weight:400;">. In addition Richard Jones has also provided a</span><a href="https://rwmj.wordpress.com/2015/09/18/importing-kvm-guests-to-ovirt-or-rhev/"> <span style="font-weight:400;">blog</span></a> <span style="font-weight:400;">on using his import script.</span></p>
<p><strong>Install the Script</strong></p>
<p><span style="font-weight:400;">Select a host where you would like to install the script. The host shouldn’t be one of your RHV systems (neither RHV-H nor RHV-M). Then simply copy/paste or use curl to get the script from</span><a href="http://git.annexia.org/?p=import-to-ovirt.git;a=blob_plain;f=import-to-ovirt.pl;hb=HEAD"> <span style="font-weight:400;">here</span></a><span style="font-weight:400;">.</span></p>
<p><strong>Install Dependencies</strong></p>
<pre># yum install perl-XML-Writer perl-Sys-Guestfs</pre>
<p><strong>Configure Direct Image Conversion</strong></p>
<p>We don't want to convert image using libvirt but direct.</p>
<pre># export LIBGUESTFS_BACKEND=direct</pre>
<p><strong>Run Import Script</strong></p>
<p><span style="font-weight:400;">The script needs to be able to access the export storage domain via NFS. Ensure the host running the export script can mount the NFS share locally and write there. Here the host providing the export domain mount is "rhevh01.lab" and the path is "/usr/share/export".</span></p>
<pre># ./import-to-ovirt.pl winnt_server.qcow2 rhevh01.lab:/usr/share/export</pre>
<p><span style="font-weight:400;">The script will create the necessary structure and metadata and place things into the export storage domain in RHV.</span></p>
<p><strong>Import Image from Export Domain</strong></p>
<p><span style="font-weight:400;">In RHV management under storage select the export storage domain. At the bottom select the tab "VM Import". Here you should see the image we just imported.</span></p>
<p><img class="alignnone size-full wp-image-10898" src="/assets/2017/08/rhev_nt_import.png" alt="rhev_nt_import" width="1329" height="612" /></p>
<p>Congratulations!!! You just successfully imported Windows NT Server into RHV.</p>
<h2>Confirm Settings</h2>
<p><span style="font-weight:400;">Before starting the Windows NT virtual machine we will ensure the settings are correct and the VM is configured to present the supported hardware.</span></p>
<p><strong>Virtual Disk Set to IDE</strong></p>
<p><img class="alignnone size-full wp-image-10789" src="/assets/2017/08/screenshot-from-2017-07-28-15-35-14.png" alt="Screenshot from 2017-07-28 15-35-14" width="1002" height="475" /></p>
<h3><strong>Set CPU Model</strong></h3>
<p><span style="font-weight:400;">Okay, we are done and ready to start NT! No, wait a second… you might remember we said NT is only able to boot on older CPU families, we choose “Pentium” in virt-manager. Have a look at the CPU settings available for the VM in RHV, no Pentium or other archaeological  interesting CPU families to be seen.</span></p>
<p><span style="font-weight:400;">This doesn’t mean they aren’t there, underneath it’s KVM after all, but they are not exposed in the web UI. Fortunately RHV comes with a feature called “VDSM Hooks” that allows to run arbitrary scripts on VM actions and enables us to change almost every feature of a VM.</span></p>
<p><strong>Configure VDSM Plugin</strong></p>
<p><strong>[On each Hypervisor (RHV-H) Host]</strong></p>
<p>Credit here goes to colleagues Martin Polednik and Michal Skrivanek for providing VDSM hook script.</p>
<pre># vi /usr/libexec/vdsm/hooks/before_vm_start/50_cpufamily</pre>
<pre>#!/usr/bin/python
</pre>
:ET