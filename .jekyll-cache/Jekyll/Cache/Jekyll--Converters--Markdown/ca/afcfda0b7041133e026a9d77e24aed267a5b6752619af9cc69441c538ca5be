I"ø<h3><a href="https://keithtenzer.files.wordpress.com/2015/10/goldfish_bowl_2.png"><img class="alignnone size-full wp-image-1324" src="/assets/2015/10/goldfish_bowl_2.png" alt="goldfish_bowl_2" width="250" height="288" /></a></h3>
<h3>Overview</h3>
<p>In this article we will look at how to build a auto scaling application in OpenStack using Heat. This article builds on the following previous articles:</p>
<p><a href="http://keithtenzer.com/2015/09/01/openstack-kilo-lab-installation-and-configuration-guide/">OpenStack Kilo Setup and Configuration</a><br />
<a href="http://keithtenzer.com/2015/09/02/auto-scaling-applications-with-openstack/">Auto Scaling Instances with OpenStack</a><br />
<!--more--><br />
As discussed in previous articles, Heat is the orchestration framework that not only automates provisioning but also provides policies around auto scaling. This article will build on <a href="http://keithtenzer.com/2015/09/02/auto-scaling-applications-with-openstack/">previous</a> article that showed how to automatically scale up or down instances. Here we will take things one step further and scale-up as well as scale-down a simple PHP web application. In addition to using Ceilometer to determine when aÂ application should be scaled based on CPU load, Neutron will be used to provide not only networking but also Load Balancer As-a-Service (LBAAS). While you can of course use an external load balancer, out-of-the-box OpenStack uses ha-proxy.</p>
<p>You can get access to Heat templates below or directly from GitHub:Â <a href="https://github.com/ktenzer/openstack-heat-templates">https://github.com/ktenzer/openstack-heat-templates</a>.</p>
<h3>Update CeilometerÂ Collection Interval</h3>
<p>By default Ceilometer will collect CPU data from instances every 10 minutes. For this example we want to change that to 60 seconds. Change the interval to 60 in the pipeline.yaml file and restart OpenStack services.</p>
<pre style="padding-left:30px;">#vi /etc/ceilometer/pipeline.yaml</pre>
<p>[code language="java"]</p>
<p>- name: cpu_source<br />
interval: 60<br />
meters:<br />
- &amp;amp;amp;quot;cpu&amp;amp;amp;quot;<br />
sinks:<br />
- cpu_sink</p>
<p>[/code]</p>
<pre style="padding-left:30px;">#openstack-service restart</pre>
<h3>Heat Stack Environment</h3>
<p>The Heat stack environment describes the unit we are dealing with and the unit of scale. The environment usually contains one or more instances and their dependencies. In this case the environment is a single instance that is a member of a load balancer. Metadata is used to create an association between all instances that are part of the stack template. This is important for metering and determining scaling events.</p>
<pre style="padding-left:30px;">#vi /etc/heat/templates/lb-env.yaml</pre>
<pre>heat_template_version: 2014-10-16
description: A load-balancer server
parameters:
  image:
    type: string
    description: Image used for servers
  key_name:
    type: string
    description: SSH key to connect to the servers
  flavor:
    type: string
    description: flavor used by the servers
  pool_id:
    type: string
    description: Pool to contact
  user_data:
    type: string
    description: Server user_data
  metadata:
    type: json
  network:
    type: string
    description: Network used by the server
</pre>
:ET