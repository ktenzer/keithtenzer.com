I"¶$<h3 class="screen"><a href="https://keithtenzer.files.wordpress.com/2015/10/ooo.jpg"><img class="alignnone size-full wp-image-1392" src="/assets/2016/05/ooo.jpg" alt="ooo" width="231" height="218" /></a></h3>
<h3 class="screen">Overview</h3>
<p>In this article we will look at how to deploy Red Hat OpenStack Platform 8 (Liberty) using Red Hat OpenStack Director. In a previous <a href="https://keithtenzer.com/2015/10/14/howto-openstack-deployment-using-tripleo-and-the-red-hat-openstack-director/">article</a> we looked at how to deploy Red Hat OpenStack Platform 7 (Kilo). The first release of OpenStack Director was in OpenStack Platform 7 so this is the second release of OpenStack Director.</p>
<p>One of the main areas where distributions of course distinguish themselves is in regards to the installer. As you will see in this article, Red Hat's installer, OpenStack Director is far more than just an installer, it is a lifecycle tool to manage the infrastructure for OpenStack. OpenStack Director is based on the upstream OpenStack foundation project <a href="https://wiki.openstack.org/wiki/TripleO">TripleO</a>. At this point, Red Hat is only distribution basing it's installer on TripleO, hopefully that changes soon. All other distributions use either proprietary software or isolated, fragmented communities to buildÂ OpenStack installers. Beyond installing OpenStack, lifecycle management is mostly an afterthought. Installing OpenStack is of course the easiest thing you will do, it isn't a big deal anymore. If your serious about OpenStack you will quickly realize things like updates, in-place upgrades, scaling, infrastructure blueprints and support lifecycles are far more critical.<br />
<!--more--></p>
<p>The aim of TripleO is not only to unify installer efforts but also add needed enterprise features to OpenStack deployment ecosystem. As Red Hat does with all upstream projects, OpenStack director also has a community platform called Â RDO-Manaer. Below is an illustration of the path to production for OpenStack Director.</p>
<p><img class="alignnone size-full wp-image-2948" src="/assets/2016/05/director_path_to_production.png" alt="director_path_to_production" width="1008" height="352" /></p>
<h3>TripleO Concepts</h3>
<p>Before getting into the weeds,Â we should understand some basic concepts. First TripleO uses OpenStack to deploy OpenStack. It mainly utilizes Ironic (metal-as-a-service) Â for provisioning and Heat for orchestration though other services such as Nova, Glance and Neutron are also used. Under the hood within Heat, puppet is also used for advanced configuration management. TripleO first deploys an OpenStack cloud used to deploy other OpenStack clouds. This is referred to as the undercloud.Â OpenStack cloud environment deployed from undercloud is known as overcloud. The networking requirement is that all systems share a non-routed provisioning network. TripleO or better said Ironic, uses PXE to boot and install initial OS image (bootstrap). These images are stored in Glance (image-as-a-service). There are different types of nodes or roles a node can have within OpenStack director. Currently OpenStack Director offers control, compute and storage roles. In the future composite or more granular roles will also be possible. For example, you might want toÂ breakout Keystone or even Neutron into their own, more granular composite roles. CEPH storage is completely integrated into OpenStack Director, meaning CEPH can be deployed with OpenStack together using the same tool, OpenStack Director. This obviously makes a lot of sense as we want to scale environment. We simply tell director to increase number of compute or storage nodes and it is automatically taken care of. We can also re-purpose x86 hardware into different roles if our ratios of compute to storage should change.</p>
<h3>Environment Setup</h3>
<p>In this environment we have the KVM hypervisor host (Laptop), the undercloud (single VM) and overcloud (1 X compute, 1 X controller, 1 X un-provisioned). The undercloud and overcloud are all VMs running on the KVM hypervisor host (Laptop). The KVM hypervisor host is on the 192.168.122.0/24 network and has IP of 192.168.122.1. The undercloud runs on a single VM on the 192.168.122.0/24 externalÂ network and 192.168.126.0/24 (provisioning) netowrk. The undercloud has an IP address of 192.168.122.90 (eth0) and 192.168.126.1 (eth1). The overcloud is on the 192.168.126.0/24 (provisioning) and 192.168.122.0/24 (external) network. Each overcloud node has three NICs, 1 on provisioning network and two external network.</p>
<p>OpenStack requires several networks: provisioning, management, external, tenant, public (API), storage and storage management. The recommendation is to have provisioning network on its own (1Gbit ideally) NIC and then bond remaining NICs (10Gbit ideally). All OpenStack networks besides provisioning would then be configured as VLANs on bond. Depending on OpenStack role (control, compute or storage) different networks would be configured on the various roles. LACP is recommended assuming it is supported by network otherwise active/passive bonding would be possible. The diagram below illustrates the configuration of the environment deployed in this article.</p>
<p><img class="alignnone size-full wp-image-3060" src="/assets/2016/05/osp_8_lab_network_setup2.png" alt="osp_8_lab_network_setup" width="819" height="474" /></p>
<p>The following diagram illustrates the various OpenStack networks and how they are associated to various roles discussed above.</p>
<p><img class="alignnone size-full wp-image-3064" src="/assets/2016/05/osp8_network_config1.jpg" alt="osp8_network_config" width="2000" height="1838" /></p>
<p>Above image courtesy of <a href="http://blog.domb.net/?p=1199">Laurent Domb</a></p>
<h3>DeployingÂ Undercloud</h3>
<p>In this section we will configure the undercloud. Normally you would deploy OpenStack nodes on baremetalÂ but since this is designed to run on Laptop or in lab, we are using KVM and nested-virtualization. Before beginning install RHEL or CentOS 7.1 on yourÂ undercloud VM.</p>
<p class="screen">Ensure hostname is static.</p>
<pre class="screen" style="padding-left:30px;">undercloud# hostnamectl set-hostname undercloud.lab.com
undercloud# systemctl restart network</pre>
<p class="screen">Register to subscription manager and enable appropriate repositories for RHEL.</p>
<pre class="screen" style="padding-left:30px;">undercloud# subscription-manager register
undercloud# subscription-manager list --available
undercloud# subscription-manager attach --pool=8a85f9814f2c669b014f3b872de132b5
undercloud# subscription-manager repos --disable=*
undercloud# subscription-manager repos --enable=rhel-7-server-rpms --enable=rhel-7-server-extras-rpms --enable=rhel-7-server-openstack-8-rpms --enable=rhel-7-server-openstack-8-director-rpms --enable rhel-7-server-rh-common-rpms</pre>
<p>Perform yum update and reboot system.</p>
<pre style="padding-left:30px;">undercloud# yum update -y &amp;&amp; reboot</pre>
<p>Install facter and ensure hostname is set properly in /etc/hosts.</p>
<pre style="padding-left:30px;">undercloud# yum install facter -y
undercloud# ipaddr=$(facter ipaddress_eth0)
undercloud# echo -e "$ipaddr\t\tundercloud.lab.com\tundercloud" &gt;&gt; /etc/hosts</pre>
<p>Install TripleO packages.</p>
<pre style="padding-left:30px;"><code class="language-none">undercloud# </code>yum install -y python-tripleoclient</pre>
<p>Create a stack user.</p>
<pre style="padding-left:30px;">undercloud# useradd stack
undercloud# echo "redhat01" | passwd stack --stdin
undercloud# echo "stack ALL=(root) NOPASSWD:ALL" | tee -a /etc/sudoers.d/stack
undercloud# su - stack</pre>
<p class="screen">Determine network settings for undercloud. For the purpose of this environment you need two virtualÂ networks on KVM hypervisor. One for provisioning and the other for the various overcloud networks (external). The undercloud provisioning network CIDR is 192.168.126.0/24 and the overcloud external network CIDR 192.168.122.0/24. This will of course probably vary in your environment. The reason the undercloud needs to also be on external network is so that it can test a functioning overcloud to ensure deployment is successful. To do this the undercloud communicates using external API endpoints.</p>
<pre class="screen" style="padding-left:30px;">[stack@undercloud ~]$ mkdir ~/images</pre>
<pre class="screen" style="padding-left:30px;">[stack@undercloud ~]$ mkdir ~/templates</pre>
<pre class="screen" style="padding-left:30px;">[stack@undercloud ~]$ cp /usr/share/instack-undercloud/undercloud.conf.sample ~/undercloud.conf</pre>
<pre class="screen" style="padding-left:30px;">[stack@undercloud ~]$ vi ~/undercloud.conf
 [DEFAULT]
 local_ip = 192.168.126.1/24
 undercloud_public_vip = 192.168.126.2
 undercloud_admin_vip = 192.168.126.3
 local_interface = eth1
 masquerade_network = 192.168.126.0/24
 dhcp_start = 192.168.126.100
 dhcp_end = 192.168.126.150
 network_cidr = 192.168.126.0/24
 network_gateway = 192.168.126.1
 discovery_iprange = 192.168.126.130,192.168.126.150
 [auth]</pre>
<p class="screen">Install the undercloud.</p>
<pre class="screen" style="padding-left:30px;">[stack@undercloud ~]$Â openstack undercloud install
#############################################################################
Undercloud install complete.
</pre>
:ET