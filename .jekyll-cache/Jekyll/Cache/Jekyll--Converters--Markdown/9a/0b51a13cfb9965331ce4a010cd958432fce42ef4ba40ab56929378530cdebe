I")<h1><img class="alignnone  wp-image-8167" src="/assets/2017/03/redhat-ms.png" alt="redhat-ms" width="300" height="231" /></h1>
<h3>Overview</h3>
<p>In this article we will deploy the CloudForms appliance in the Azure cloud. CloudForms is a cloud management platform based on the opensource project <a href="http://manageiq.org">manageiq</a>. Red Hat bought manageiq a few years back and opensourced the software. Originally it was designed to manage VMware but over the years has expanded to many additional traditional as well as cloud platforms. You can use this article as reference for both CloudForms and ManageIQ.</p>
<p>CloudForms can connect to many cloud providers such as RHEV (Red Hat Enterprise Virtualization), VMware, Hyper-V, OpenStack, Amazon Web Services (AWS), Google Cloud Engine (GCE) and Azure. Large organizations don't have one cloud but many and in addition typically have on-premise, off-premise as well as public. All of these various platforms creates a lot of complexity if not managed right. CloudForms can create a bridge between traditional (mode 1) and cloud native (mode 2) workloads, offering applications a path to switch between these modes. In addition, CloudForms allows an IT organization to act as a cloud broker between the various public platforms. Finally CloudForms can be used to automatically deploy and manage applications across the various cloud platforms. Businesses have choice in platform, flexibility and speed while IT can manage it all centrally applying common policies or rule-sets regardless of where workloads are running.</p>
<p><!--more--></p>
<h3>Prepare</h3>
<p>Red Hat provides CloudForms as a appliance. The appliances each have various formats, depending on the platform. For Microsft Hyper-V and Azure, Red Hat provides a Virtual Hard Disk (VHD). The vhd is a dynamic disk. Azure unfortunately does not support dynamic disks but only fixed disks. In order to import CloudForms appliance in Azure we need to convert the appliance vhd to fixed disk. In addition the vhd will be fixed size of around 40GB. To prevent having to upload 40GB and just the actual data which is closer to 2GB we will use several tools. You can of course use Powershell, using the Azure cmdlets. If you are a Linux guy like me though, that isn't an option. Thankfully Microsoft has provided a tool written in Go that works great for uploading disks to Azure. In addition Microsoft provides a CLI similar to functionality of Powershell written in python.</p>
<p><strong>Convert VHD from dynamic to fixed</strong></p>
<p>The first question you might have is why? Well Red Hat doesn't want you to have to download a 40GB image so they provide a dynamic disk. In the next steps we will take that image, convert to fixed disk and upload to Azure, ignoring the zero'ed blocks.</p>
<p><strong>Convert image to raw using qemu tools</strong></p>
<pre># qemu-img convert -f vpc -O raw cfme-azure-5.7.0.17-1.x86_64.vhd cfme-azure-5.7.0.17-1.raw</pre>
<p><strong>Calculate fixed image size</strong></p>
<pre>$sudo rawdisk="cfme-azure-5.7.0.17-1.raw"
$sudo vhddisk="cfme-azure-5.7.0.17-1.vhd"
$sudo MB=$((1024*1024))
$sudo rounded_size=$((($size/$MB + 1)*$MB))
$sudo size=$(qemu-img info -f raw --output json "$rawdisk" | gawk 'match($0, /"virtual-size": ([0-9]+),/, val) {print val[1]}')
$sudo rounded_size=$((($size/$MB + 1)*$MB))</pre>
<p><strong>Resize image</strong></p>
<pre>$sudo qemu-img resize -f raw "$rawdisk" $rounded_size
$sudo qemu-img convert -f raw -o subformat=fixed,force_size -O vpc "$rawdisk" "$vhddisk"</pre>
<p><strong>Download Azure VHD Tools</strong></p>
<p>As mentioned the Azure VHD tools are written in Go so you need to first install Go. I installed version 1.7.4.</p>
<pre>$ gunzip go1.7.4.linux-amd64.tar.gz 
$ tar xvf go1.7.4.linux-amd64.tar 
$ cd go</pre>
<p><strong>Export Environment Parameters</strong></p>
<pre> $ mkdir $HOME/work
 $ export GOPATH=$HOME/work
 $ export PATH=$PATH:$GOPATH/bin</pre>
<p><strong>Install VHD Tools</strong></p>
<pre> $ go get github.com/Microsoft/azure-vhd-utils</pre>
<p><strong>Upload the CloudForms Fixed Disk to Azure</strong></p>
<pre>$ ./azure-vhd-utils upload --localvhdpath /home/ktenzer/cfme-azure-5.7.0.17-1.vhd --stgaccountname &lt;storage account&gt; --stgaccountkey &lt;storage key&gt; --containername templates --blobname cfme-azure-5.7.0.17-1.vhd --parallelism 8</pre>
<p>Once the upload completes you can deploy the CloudForms Appliance in Azure. In order to do this we will use the Azure CLI which is python based.</p>
<p><strong>Install Python and dependencies</strong></p>
<pre>$ sudo yum install python
$ sudo yum install python-pip
$ sudo yum install python-devel
$ sudo yum install openssl-devel
$ sudo yum install npm</pre>
<p><strong>Install Azure CLI</strong></p>
<pre>$ npm install azure-cli -g
$ sudo npm install azure-cli -g
$ sudo pip install --upgrade pip
$ sudo pip install azure==2.0.0rc5</pre>
<p><strong>Deploy CloudForms Appliance</strong></p>
<p>Using the Azure CLI deploy CloudForms Appliance</p>
<pre>$ azure vm image create cfme-azure-5.7.0.17-1 --blob-url https://premiumsadpdhlose2disk.blob.core.windows.net/templates/cfme-azure-5.7.0.17-1.vhd --os Linux /home/ktenzer/cfme-azure-5.7.0.17-1.vhd</pre>
<p>Note: you can also use the Azure portal UI to create VM once the image is uploaded.</p>
<h3>Configure CloudForms in Azure</h3>
<p>Once the CloudForms Appliance is deployed you can access it using username/password or ssh-key depending on what you chose when creating VM in Azure.</p>
<pre>$ ssh ktenzer@&lt;CloudForms Appliance IP&gt;</pre>
<p><strong>Run the appliance console</strong></p>
<pre>$ sudo appliance_console
</pre>
:ET